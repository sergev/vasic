/*
 * Синтаксический анализатор для языка Васик.
 * Copyright (GPL) 2008 Serge Vakulenko <serge@vak.ru>
 */
%include {
	import tree;
	import scanner;
	import std.stdio;
}

/*
 * Именам констант, обозначающих типы лексем, припишем префикс NODE_.
 */
%token_prefix NODE_

/*
 * Первичные лексемы входного файла имеют тип lexeme_t.
 */
%token_type {lexeme_t}
%left COMMA DOT SEMICOLON COLON LABEL LPAR RPAR LBRA RBRA
	PLUS MINUS MUL DIV MOD GT LT EQUAL GE LE NEQ QUESTION NUMBER
	AND BREAK CONTINUE DO EACH ELSE ELSEIF ENDDO ENDFUNCTION ENDIF
	ENDPROCEDURE ENDTRY EXCEPT EXECUTE EXPORT FOR FUNCTION GOTO IF
	IN NEW NOT OR PROCEDURE RAISE RETURN THEN TO TRY WHILE .

/*
 * Узлы синтаксического дерева имеют обобщённый тип node_t.
 */
%default_type {node_t}

%syntax_error {
	lexeme_t lexeme = cast(lexeme_t) TOKEN;
	if (lexeme)
		writefln ("%d:%d: syntax error at `%s'",
			lexeme.line, lexeme.column, lexeme.source);
	else
		writefln ("syntax error");
}

/*
 * Программа состоит из:
 * - раздела определения переменных;
 * - раздела процедур и функций;
 * - раздела исполняемых операторов.
 */
program ::= vardecls(A) procs(B) operators(C) .
{
	if (A) {
		writefln ("vardecls = ");
		A.print (1);
	}
	if (B) {
		writefln ("procs = ");
		B.print (1);
	}
	if (C) {
		writefln ("operators = ");
		C.print (1);
	}
}

/*--------------------------------------------
 * Определения переменных.
 */
vardecls ::= .
vardecls(A) ::= vardecls(B) vardecl(C) .
{
	if (B) A = new list_t (B, C);
	else   A = C;
}

vardecl(A) ::= VAR varnames(B) SEMICOLON .
{
	A = B;
}

varnames(A) ::= NAME(B) export(C) .
{
	A = new name_t (B.text, C);
}

varnames(A) ::= varnames(B) COMMA NAME(C) export(D) .
{
	A = new list_t (B, new name_t (C.text, D));
}

%type export {bool}
export ::= .
export(A) ::= EXPORT .
{
	A = true;
}

/*--------------------------------------------
 * Описания процедур и функций.
 */
procs ::= .
procs(A) ::= procs(B) procedure(C) .
{
	if (B) A = new list_t (B, C);
	else   A = C;
}

procs(A) ::= procs(B) function(C) .
{
	if (B) A = new list_t (B, C);
	else   A = C;
}

procedure(A) ::= PROCEDURE NAME(B) LPAR args(C) RPAR export(D)
	vardecls(E) operators(F) ENDPROCEDURE .
{
	A = new function_t (B.text, D, false, C, E, F);
}

function(A) ::= FUNCTION NAME(B) LPAR args(C) RPAR export(D)
	vardecls(E) operators(F) ENDFUNCTION .
{
	A = new function_t (B.text, D, true, C, E, F);
}

args ::= .

args(A) ::= arg(B) .
{
	A = B;
}

args(A) ::= args(B) COMMA arg(C) .
{
	A = new list_t (B, C);
}

arg(A) ::= value(B) NAME(C) defvalue(D) .
{
	A = new arg_t (C.text, B, D);
}

%type value {bool}
value ::= .
value(A) ::= VALUE .
{
	A = true;
}

defvalue ::= .
defvalue(A) ::= EQUAL expression(B) .
{
	A = B;
}

/*--------------------------------------------
 * Исполняемые операторы.
 */
operators ::= .
operators ::= operator SEMICOLON operators .
operators ::= LABEL COLON operators .

operator ::= .
operator ::= NAME EQUAL expression .
operator ::= term DOT NAME EQUAL expression .
operator ::= term LBRA expressions RBRA EQUAL expression .
operator ::= FOR NAME EQUAL expression TO expression
	DO operators ENDDO .
operator ::= FOR EACH NAME IN expression
	DO operators ENDDO .
operator ::= BREAK .
operator ::= CONTINUE .
operator ::= RETURN optional_expression .
operator ::= IF expression THEN operators elsif else ENDIF .
operator ::= GOTO LABEL .
operator ::= WHILE expression DO operators ENDDO .
operator ::= TRY operators EXCEPT operators ENDTRY .
operator ::= RAISE optional_expression .
operator ::= EXECUTE LPAR expression RPAR .
operator ::= ADDHANDLER expression COMMA expression .
operator ::= REMOVEHANDLER expression COMMA expression .

elsif ::= .
elsif ::= elsif ELSIF expression THEN operators .

else ::= .
else ::= ELSE operators .

expressions ::= expression .
expressions ::=	expressions COMMA expression .

optional_expression ::= .
optional_expression ::= expression .

optional_expressions ::= .
optional_expressions ::= expressions .

/*--------------------------------------------
 * Выражения.
 */
expression ::= term .
expression ::= expression AND expression .
expression ::= expression OR expression .
expression ::= expression PLUS expression .
expression ::= expression MINUS expression .
expression ::= expression MUL expression .
expression ::= expression DIV expression .
expression ::= expression MOD expression .
expression ::= expression GE expression .
expression ::= expression GT expression .
expression ::= expression EQUAL expression .
expression ::= expression NEQ expression .
expression ::= expression LE expression .
expression ::= expression LT expression .

term ::= NAME .
term ::= NUMBER .
term ::= STRING .
term ::= DATE .
term ::= TRUE .
term ::= FALSE .
term ::= UNDEFINED .
term ::= LPAR expression RPAR .
term ::= QUESTION LPAR expression COMMA expression COMMA expression RPAR .
term ::= MINUS term .
term ::= PLUS term .
term ::= NOT term .
term ::= term DOT NAME .
term ::= NAME LPAR optional_expressions RPAR .
term ::= term DOT NAME LPAR optional_expressions RPAR .
term ::= term LBRA expressions RBRA .
term ::= NEW NAME .
term ::= NEW NAME LPAR optional_expressions RPAR.
term ::= NEW LPAR expressions RPAR.

%code {
int lexeme_type (lexeme_t lex)
{
	switch (lex.type) {
	case '+':			return NODE_PLUS;
	case '-':			return NODE_MINUS;
	case '*':			return NODE_MUL;
	case '/':			return NODE_DIV;
	case '%':			return NODE_MOD;
	case '=':			return NODE_EQUAL;
	case '<':			return NODE_LT;
	case '>':			return NODE_GT;
	case LEX_LE:			return NODE_LE;
	case LEX_GE:			return NODE_GE;
	case LEX_NEQ:			return NODE_NEQ;
	case '(':			return NODE_LPAR;
	case ')':			return NODE_RPAR;
	case '[':			return NODE_LBRA;
	case ']':			return NODE_RBRA;
	case ',':			return NODE_COMMA;
	case '.':			return NODE_DOT;
	case ':':			return NODE_COLON;
	case ';':			return NODE_SEMICOLON;
	case '?':			return NODE_QUESTION;
	case LEX_NUMBER:		return NODE_NUMBER;
	case LEX_STRING:		return NODE_STRING;
	case LEX_LABEL:			return NODE_LABEL;
	case LEX_NAME:
		switch (lex.text) {
		case "and":		return NODE_AND;
		case "break":		return NODE_BREAK;
		case "continue":	return NODE_CONTINUE;
		case "do":		return NODE_DO;
		case "each":		return NODE_EACH;
		case "elseif":		return NODE_ELSEIF;
		case "else":		return NODE_ELSE;
		case "enddo":		return NODE_ENDDO;
		case "endfunction":	return NODE_ENDFUNCTION;
		case "endif":		return NODE_ENDIF;
		case "endprocedure":	return NODE_ENDPROCEDURE;
		case "endtry":		return NODE_ENDTRY;
		case "except":		return NODE_EXCEPT;
		case "execute":		return NODE_EXECUTE;
		case "export":		return NODE_EXPORT;
		case "for":		return NODE_FOR;
		case "function":	return NODE_FUNCTION;
		case "goto":		return NODE_GOTO;
		case "if":		return NODE_IF;
		case "in":		return NODE_IN;
		case "new":		return NODE_NEW;
		case "not":		return NODE_NOT;
		case "or":		return NODE_OR;
		case "procedure":	return NODE_PROCEDURE;
		case "raise":		return NODE_RAISE;
		case "return":		return NODE_RETURN;
		case "then":		return NODE_THEN;
		case "to":		return NODE_TO;
		case "try":		return NODE_TRY;
		case "var":		return NODE_VAR;
		case "while":		return NODE_WHILE;
		case "возврат":		return NODE_RETURN;
		case "вызватьисключение": return NODE_RAISE;
		case "выполнить":	return NODE_EXECUTE;
		case "для":		return NODE_FOR;
		case "если":		return NODE_IF;
		case "и":		return NODE_AND;
		case "из":		return NODE_IN;
		case "или":		return NODE_OR;
		case "иначе":		return NODE_ELSE;
		case "иначеесли":	return NODE_ELSEIF;
		case "исключение":	return NODE_EXCEPT;
		case "каждого":		return NODE_EACH;
		case "конецесли":	return NODE_ENDIF;
		case "конецпопытки":	return NODE_ENDTRY;
		case "конецпроцедуры":	return NODE_ENDPROCEDURE;
		case "конецфункции":	return NODE_ENDFUNCTION;
		case "конеццикла":	return NODE_ENDDO;
		case "не":		return NODE_NOT;
		case "новый":		return NODE_NEW;
		case "перейти":		return NODE_GOTO;
		case "перем":		return NODE_VAR;
		case "по":		return NODE_TO;
		case "пока":		return NODE_WHILE;
		case "попытка":		return NODE_TRY;
		case "прервать":	return NODE_BREAK;
		case "продолжить":	return NODE_CONTINUE;
		case "процедура":	return NODE_PROCEDURE;
		case "тогда":		return NODE_THEN;
		case "функция":		return NODE_FUNCTION;
		case "цикл":		return NODE_DO;
		case "экспорт":		return NODE_EXPORT;
		default:		return NODE_NAME;
		}
	default:
		/* Cannot happen. */
		writefln ("Unexpected lexeme type = %d", lex.type);
		return 0;
	}
}

debug (parser) {
	void main()
	{
		writefln ("Parser unit test started.");
		scanner_t scanner = new scanner_t ("parser.test");
		parser_t parser = new parser_t ();
		//parser.trace (std.stdio.stdout, "*** ");
		for (;;) {
			scanner.forward ();
			if (! scanner.token)
				break;
			if (scanner.token.type < 0) {
				writefln ("%s:%d:%d: %s", scanner.filename,
					scanner.token.line, scanner.token.column,
					scanner.token.source);
				break;
			}
			parser.parse (lexeme_type (scanner.token), scanner.token);
		}
		parser.parse (0, null);
		writefln ("Parser unit test finished.");
	}
}
}
